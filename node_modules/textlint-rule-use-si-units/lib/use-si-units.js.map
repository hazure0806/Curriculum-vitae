{"version":3,"sources":["../src/use-si-units.js"],"names":["P","require","numberWithUnitTarget","defaultOptions","allowedUnits","restrictNonSIUnits","siUnitOneChar","oneOf","siUnitManyChar","regexp","allowWordManyChar","siDerivedUnitOneChar","siDerivedUnitManyChar","nonSiUnitOneChar","nonSiUnitManyChar","siPrefixOneChar","siPrefixManyChar","string","concatSymbol","generateSiUnitParser","siUnitsManyChar","alt","siUnitsOneChar","length","allowedUnitsString","reduce","prev","value","RegExp","siUnits","siSymbols","digit","many","assert","results","parse","status","module","exports","context","userOptions","options","Object","assign","Syntax","RuleError","report","getSource","Str","node","matches","forEach","match","siUnitParser","parseResult","text","isSymbolOnly","index"],"mappings":"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","sourcesContent":["// use-si-unit.js\n'use strict';\nconst P = require('parsimmon');\nimport { matchCaptureGroupAll } from 'match-index';\nimport { isUserWrittenNode } from './util/node-util';\n\nconst numberWithUnitTarget = /[0-9]+? ([a-zA-ZΩΩ℧%‰‱℃℉ℊÅμ°′″^\\-\\/·･・\\(\\)]+)/;\n\nconst defaultOptions = {\n    allowedUnits: [],\n    restrictNonSIUnits: false,\n};\n\nconst siUnitOneChar = P.oneOf('-msAKg');\nconst siUnitManyChar = P.regexp(/mol|cd/);\nconst allowWordManyChar = P.regexp(/and|or|nor|but|by|for|from|on|out|per|to/);\nconst siDerivedUnitOneChar = P.oneOf('JWCVFΩSTH℃');\nconst siDerivedUnitManyChar = P.regexp(/rad|sr|Hz|N|Pa|Wb|lm|lx|Bq|Gy|Sv|kat/);\nconst nonSiUnitOneChar = P.oneOf('hd°′″lLtB');\nconst nonSiUnitManyChar = P.regexp(/min|au|ha|Da|eV|Np|dB/);\nconst siPrefixOneChar = P.oneOf('YZEPTGMkhcdmμnpfazy');\nconst siPrefixManyChar = P.string('da');\nconst concatSymbol = P.oneOf('^/·･・()');\n\nconst generateSiUnitParser = (allowedUnits, restrictNonSIUnits) => {\n    // Combine parsers. The longer patterns must come first to avoid confusing patterns with the same prefix.\n    let siUnitsManyChar = P.alt(siUnitManyChar, siDerivedUnitManyChar);\n    let siUnitsOneChar = P.alt(siUnitOneChar, siDerivedUnitOneChar);\n\n    if(restrictNonSIUnits !== true) {\n        siUnitsManyChar = P.alt(siUnitsManyChar, nonSiUnitManyChar);\n        siUnitsOneChar = P.alt(siUnitsOneChar, nonSiUnitOneChar);\n    }\n    if(allowedUnits.length > 0) {\n        const allowedUnitsString = allowedUnits.reduce((prev, value) => prev === '' ? value : `${prev}|${value}`, '');\n        siUnitsManyChar = P.alt(siUnitsManyChar, P.regexp(new RegExp(allowedUnitsString)));\n    }\n    const siUnits = P.alt(siUnitsManyChar, allowWordManyChar, siUnitsOneChar);\n    const siSymbols = P.alt(siPrefixManyChar, siPrefixOneChar, concatSymbol);\n\n    // Construct an overall parser.\n    return P.alt(siUnits, siSymbols, P.digit)\n    .many()\n    .assert(\n        results => results.reduce((prev, value) => prev || siUnits.parse(value).status, false),\n        'Must contain at least one unit symbols'\n    );\n};\n\nmodule.exports = (context, userOptions = {}) => {\n    const options = Object.assign({}, defaultOptions, userOptions);\n    const {Syntax, RuleError, report, getSource} = context;\n    return {\n        [Syntax.Str](node) {\n            if (!isUserWrittenNode(node, context)) {\n                return;\n            }\n            const matches = matchCaptureGroupAll(getSource(node), numberWithUnitTarget);\n\n            matches.forEach(match => {\n                const siUnitParser = generateSiUnitParser(options.allowedUnits, options.restrictNonSIUnits);\n                const parseResult = siUnitParser.parse(match.text);\n                const isSymbolOnly = concatSymbol.parse(match.text);\n                if(parseResult.status === false && isSymbolOnly.status === false) report(\n                    node,\n                    new RuleError(`「${match.text}」には、SI単位系で使用できない文字が含まれています。SI単位系を使用してください。`, {\n                        index: match.index,\n                    })\n                );\n            });\n        }\n    };\n};\n"],"file":"use-si-units.js"}