"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const worker_threads_1 = require("worker_threads");
const textlint_engine_1 = require("../DEPRECATED/textlint-engine");
const textfix_engine_1 = require("../DEPRECATED/textfix-engine");
const debug_1 = __importDefault(require("debug"));
const debug = (0, debug_1.default)("textlint:parallel/lint-worker");
const { config, type, files } = worker_threads_1.workerData;
debug("Worker(%s) Start", worker_threads_1.threadId);
// Worker Main
if (worker_threads_1.isMainThread) {
    throw new Error("Worker should not be worked in mainThread");
}
const engine = type === "lint" ? new textlint_engine_1.TextLintEngine(config) : new textfix_engine_1.TextFixEngine(config);
engine
    .executeOnFiles(files)
    .then((results) => {
    debug("Worker(%s) Done", worker_threads_1.threadId);
    if (worker_threads_1.parentPort) {
        worker_threads_1.parentPort.postMessage(results);
    }
})
    .catch((error) => {
    debug("Worker(%s) Error", error.stack);
    process.exitCode = 1;
});
//# sourceMappingURL=lint-worker.js.map